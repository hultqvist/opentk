// Generated by Generator.Template using template Math/MatrixTemplate.cs

#define TEMPLATE_DIM_3
#define TEMPLATE_UNIT_SINGLE

#region --- License ---
/*
Copyright (c) 2006 - 2008 The Open Toolkit library.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
#endregion
using System;
using System.Runtime.InteropServices;

namespace OpenTK
{
    using unit = System.Single;
    using unitQuaternion = Quaternion;
    using vec3 = Vector3;
    using vec = Vector3;

    /// <summary>
    /// <para>Represents a 4x4 Matrix</para>
    /// <para>Storage is column-major and vectors are assumed to be column vectors.</para>
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Matrix3 : IEquatable<Matrix3>
    {
        /// <summary></summary>
        public vec Column0;
        /// <summary></summary>
        public vec Column1;
        /// <summary></summary>
        public vec Column2;

        private const unit one = 1;

        #region Rows
        
        /// <summary>
        /// The first column of this matrix
        /// </summary>
        public vec Row0
        {
            get
            {
                return new vec(
                    Column0.X,
                    Column1.X,
                    Column2.X
                );
            }
        }

        /// <summary>
        /// The second column of this matrix
        /// </summary>
        public vec Row1
        {
            get
            {
                return new vec(
                    Column0.Y,
                    Column1.Y,
                    Column2.Y
                );
            }
        }

        /// <summary>
        /// The third column of this matrix
        /// </summary>
        public vec Row2
        {
            get
            {
                return new vec(
                    Column0.Z,
                    Column1.Z,
                    Column2.Z
                );
            }
        }


        #endregion

        #region Constructors

        /// <summary></summary>
        public Matrix3(vec column0, vec column1, vec column2
        )
        {
            Column0 = column0;
            Column1 = column1;
            Column2 = column2;
        }

        /// <summary>
        /// Initializes a matrix, parameters are indexed mRowCol
        /// </summary>
        public Matrix3(
            unit m00, unit m01, unit m02,
            unit m10, unit m11, unit m12,
            unit m20, unit m21, unit m22)
        {
            Column0 = new vec(m00, m10, m20);
            Column1 = new vec(m01, m11, m21);
            Column2 = new vec(m02, m12, m22);
        }

        #endregion

        #region Instance Operations


        /// <summary>
        /// Return the inverse of the matrix.
        /// </summary>
        public Matrix3 Invert()
        {
            return Matrix3.Invert(this);
        }

        /// <summary>
        /// Return the transpose of the matrix
        /// </summary>
        public Matrix3 Transpose()
        {
            return Matrix3.Transpose(this);
        }

        #endregion

        #region Static: Matrix generation

        /// <summary>
        /// The identity matrix
        /// </summary>
        public static readonly Matrix3 Identity = new Matrix3(
                vec.UnitX,
                vec.UnitY,
                vec.UnitZ
            );

        #region RotationQuaternion
        
        /// <summary>
        /// Build a rotation matrix from the specified quaternion.
        /// </summary>
        /// <param name="q">Quaternion to translate.</param>
        /// <param name="m">Matrix result.</param>
        public static void RotationQuaternion(ref unitQuaternion q, ref Matrix3 m)
        {
            unit scale = one / q.Length;
            
            unit X = q.X * scale;
            unit Y = q.Y * scale;
            unit Z = q.Z * scale;
            unit W = q.W * scale;

            unit xx = X * X;
            unit xy = X * Y;
            unit xz = X * Z;
            unit xw = X * W;
            unit yy = Y * Y;
            unit yz = Y * Z;
            unit yw = Y * W;
            unit zz = Z * Z;
            unit zw = Z * W;

            m.Column0.X = 1 - 2 * (yy + zz);
            m.Column0.Y = 2 * (xy + zw);
            m.Column0.Z = 2 * (xz - yw);

            m.Column1.X = 2 * (xy - zw);
            m.Column1.Y = 1 - 2 * (xx + zz);
            m.Column1.Z = 2 * (yz + xw);

            m.Column2.X = 2 * (xz + yw);
            m.Column2.Y = 2 * (yz - xw);
            m.Column2.Z = 1 - 2 * (xx + yy);

        }

        /// <summary>
        /// Build a rotation matrix from the specified quaternion.
        /// </summary>
        /// <param name="q">Quaternion to translate.</param>
        /// <returns>A matrix instance.</returns>
        public static Matrix3 RotationQuaternion(unitQuaternion q)
        {
            Matrix3 m = new Matrix3();
            RotationQuaternion(ref q, ref m);
            return m;
        }

        #endregion

        #region RotationAxisAngle
        
        /// <summary>
        /// Build a rotation matrix from the specified axis/angle rotation.
        /// </summary>
        /// <param name="axis">The axis to rotate about.</param>
        /// <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
        /// <param name="result">A matrix instance.</param>
        public static void RotationAxisAngle(vec3 axis, double angle, out Matrix3 result)
        {
            unit cos = (unit)System.Math.Cos(-angle);
            unit sin = (unit)System.Math.Sin(-angle);
            unit t = one - cos;

            axis.Normalize();
            result = new Matrix3(t * axis.X * axis.X + cos, t * axis.X * axis.Y - sin * axis.Z, t * axis.X * axis.Z + sin * axis.Y,
                                 t * axis.X * axis.Y + sin * axis.Z, t * axis.Y * axis.Y + cos, t * axis.Y * axis.Z - sin * axis.X,
                                 t * axis.X * axis.Z - sin * axis.Y, t * axis.Y * axis.Z + sin * axis.X, t * axis.Z * axis.Z + cos);
        }
        
        /// <summary>
        /// Build a rotation matrix from the specified axis/angle rotation.
        /// </summary>
        /// <param name="axis">The axis to rotate about.</param>
        /// <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
        /// <returns>A matrix instance.</returns>
        public static Matrix3 RotationAxisAngle(vec3 axis, double angle)
        {
            Matrix3 result;
            RotationAxisAngle(axis, angle, out result);
            return result;
        }
        
        #endregion

        #region Rotation[XYZ]

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the x-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the x-axis.</param>
        /// <param name="result">The resulting Matrix3 instance.</param>
        public static void RotationX(double angle, out Matrix3 result)
        {
            unit cos = (unit)System.Math.Cos(angle);
            unit sin = (unit)System.Math.Sin(angle);

            result.Column0 = vec.UnitX;
            result.Column1 = new vec(0, cos, sin);
            result.Column2 = new vec(0, -sin, cos);
        }

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the x-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the x-axis.</param>
        /// <returns>The resulting Matrix3 instance.</returns>
        public static Matrix3 RotationX(double angle)
        {
            Matrix3 result;
            RotationX(angle, out result);
            return result;
        }

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the y-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the y-axis.</param>
        /// <param name="result">The resulting Matrix3 instance.</param>
        public static void RotationY(double angle, out Matrix3 result)
        {
            unit cos = (unit)System.Math.Cos(angle);
            unit sin = (unit)System.Math.Sin(angle);

            result.Column0 = new vec(cos, 0, -sin);
            result.Column1 = vec.UnitY;
            result.Column2 = new vec(sin, 0, cos);
        }

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the y-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the y-axis.</param>
        /// <returns>The resulting Matrix3 instance.</returns>
        public static Matrix3 RotationY(double angle)
        {
            Matrix3 result;
            RotationY(angle, out result);
            return result;
        }

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the z-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the z-axis.</param>
        /// <param name="result">The resulting Matrix3 instance.</param>
        public static void RotationZ(double angle, out Matrix3 result)
        {
            unit cos = (unit)System.Math.Cos(angle);
            unit sin = (unit)System.Math.Sin(angle);

            result.Column0 = new vec(cos, sin, 0);
            result.Column1 = new vec(-sin, cos, 0);
            result.Column2 = vec.UnitZ;
        }

        /// <summary>
        /// Builds a rotation matrix for a right-hand rotation around the z-axis.
        /// </summary>
        /// <param name="angle">The right-hand rotation in radians around the z-axis.</param>
        /// <returns>The resulting Matrix3 instance.</returns>
        public static Matrix3 RotationZ(double angle)
        {
            Matrix3 result;
            RotationZ(angle, out result);
            return result;
        }

        #endregion


        #region Scale Functions

        /// <summary>
        /// Build a scaling matrix
        /// </summary>
        /// <param name="scale">Single scale factor for x,y and z axes</param>
        /// <returns>A scaling matrix</returns>
        public static Matrix3 Scale(unit scale)
        {
            return Scale(scale, scale, scale);
        }

        /// <summary>
        /// Build a scaling matrix
        /// </summary>
        /// <param name="scale">Scale factors for x,y and z axes</param>
        /// <returns>A scaling matrix</returns>
        public static Matrix3 Scale(vec3 scale)
        {
            return Scale(scale.X, scale.Y, scale.Z);
        }

        /// <summary>
        /// Build a scaling matrix
        /// </summary>
        /// <param name="x">Scale factor for x-axis</param>
        /// <param name="y">Scale factor for y-axis</param>
        /// <param name="z">Scale factor for z-axis</param>
        /// <returns>A scaling matrix</returns>
        public static Matrix3 Scale(unit x, unit y, unit z)
        {
            Matrix3 result = new Matrix3();
            result.Column0.X = x;
            result.Column1.Y = y;
            result.Column2.Z = z;
            return result;
        }

        #endregion

        #endregion

        #region Operators

        /// <summary>
        /// Compares two instances for equality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left equals right; false otherwise.</returns>
        public static bool operator ==(Matrix3 left, Matrix3 right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Compares two instances for inequality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left does not equal right; false otherwise.</returns>
        public static bool operator !=(Matrix3 left, Matrix3 right)
        {
            return !left.Equals(right);
        }
        
        /// <summary>
        /// Element-wise addition.
        /// </summary>
        public static Matrix3 operator +(unit left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left + right.Column0;
            m.Column1 = left + right.Column1;
            m.Column2 = left + right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise addition.
        /// </summary>
        public static Matrix3 operator +(Matrix3 left, unit right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left.Column0 + right;
            m.Column1 = left.Column1 + right;
            m.Column2 = left.Column2 + right;
            return m;
        }

        /// <summary>
        /// Element-wise addition.
        /// </summary>
        public static Matrix3 operator +(Matrix3 left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left.Column0 + right.Column0;
            m.Column1 = left.Column1 + right.Column1;
            m.Column2 = left.Column2 + right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise subtraction.
        /// </summary>
        public static Matrix3 operator -(unit left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left - right.Column0;
            m.Column1 = left - right.Column1;
            m.Column2 = left - right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise subtraction.
        /// </summary>
        public static Matrix3 operator -(Matrix3 left, unit right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left.Column0 - right;
            m.Column1 = left.Column1 - right;
            m.Column2 = left.Column2 - right;
            return m;
        }

        /// <summary>
        /// Element-wise subtraction.
        /// </summary>
        public static Matrix3 operator -(Matrix3 left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left.Column0 - right.Column0;
            m.Column1 = left.Column1 - right.Column1;
            m.Column2 = left.Column2 - right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise negation.
        /// </summary>
        public static Matrix3 operator -(Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = - right.Column0;
            m.Column1 = - right.Column1;
            m.Column2 = - right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise multiplication
        /// </summary>
        /// <returns>A new Matrix3 which holds the result of the multiplication</returns>
        public static Matrix3 operator *(unit left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left * right.Column0;
            m.Column1 = left * right.Column1;
            m.Column2 = left * right.Column2;
            return m;
        }

        /// <summary>
        /// Element-wise multiplication
        /// </summary>
        /// <returns>A new Matrix3 which holds the result of the multiplication</returns>
        public static Matrix3 operator *(Matrix3 left, unit right)
        {
            Matrix3 m = new Matrix3();
            m.Column0 = left.Column0 * right;
            m.Column1 = left.Column1 * right;
            m.Column2 = left.Column2 * right;
            return m;
        }

        /// <summary>
        /// Matrix multiplication with a column vector
        /// </summary>
        /// <param name='left'>
        /// Transform Matrix
        /// </param>
        /// <param name='right'>
        /// Column vector
        /// </param>
        public static vec operator *(Matrix3 left, vec right)
        {
            vec result = new vec();
            result.X =
                left.Column0.X * right.X + 
                left.Column1.X * right.Y + 
                left.Column2.X * right.Z
                    ;
            result.Y =
                left.Column0.Y * right.X + 
                left.Column1.Y * right.Y + 
                left.Column2.Y * right.Z
                    ;
            result.Z =
                left.Column0.Z * right.X + 
                left.Column1.Z * right.Y + 
                left.Column2.Z * right.Z
                    ;
            return result;
        }

        /// <summary>
        /// Matrix multiplication
        /// </summary>
        /// <param name="left">left-hand operand</param>
        /// <param name="right">right-hand operand</param>
        /// <returns>A new Matrix3 which holds the result of the multiplication</returns>
        public static Matrix3 operator *(Matrix3 left, Matrix3 right)
        {
            Matrix3 m = new Matrix3();
            Matrix3.Multiply(ref left, ref right, out m);
            return m;
        }

        /// <summary>
        /// Multiplies two instances.
        /// </summary>
        /// <param name="left">The left operand of the multiplication.</param>
        /// <param name="right">The right operand of the multiplication.</param>
        /// <param name="result">A new instance that is the result of the multiplication</param>
        public static void Multiply(ref Matrix3 left, ref Matrix3 right, out Matrix3 result)
        {
            //Believe it or not, referencing the same left.Col0.X four times is faster than storing it in a local variable.
            result.Column0.X =
                left.Column0.X * right.Column0.X + 
                left.Column1.X * right.Column0.Y + 
                left.Column2.X * right.Column0.Z;
            result.Column0.Y =
                left.Column0.Y * right.Column0.X + 
                left.Column1.Y * right.Column0.Y + 
                left.Column2.Y * right.Column0.Z;
            result.Column0.Z =
                left.Column0.Z * right.Column0.X + 
                left.Column1.Z * right.Column0.Y + 
                left.Column2.Z * right.Column0.Z;

            result.Column1.X =
                left.Column0.X * right.Column1.X + 
                left.Column1.X * right.Column1.Y + 
                left.Column2.X * right.Column1.Z;
            result.Column1.Y =
                left.Column0.Y * right.Column1.X + 
                left.Column1.Y * right.Column1.Y + 
                left.Column2.Y * right.Column1.Z;
            result.Column1.Z =
                left.Column0.Z * right.Column1.X + 
                left.Column1.Z * right.Column1.Y + 
                left.Column2.Z * right.Column1.Z;

            result.Column2.X =
                left.Column0.X * right.Column2.X + 
                left.Column1.X * right.Column2.Y + 
                left.Column2.X * right.Column2.Z;
            result.Column2.Y =
                left.Column0.Y * right.Column2.X + 
                left.Column1.Y * right.Column2.Y + 
                left.Column2.Y * right.Column2.Z;
            result.Column2.Z =
                left.Column0.Z * right.Column2.X + 
                left.Column1.Z * right.Column2.Y + 
                left.Column2.Z * right.Column2.Z;
        }

        #endregion

        #region Static: Matrix Operations
        
        /// <summary>
        /// Calculate the inverse of the given matrix
        /// </summary>
        /// <param name="mat">The matrix to invert</param>
        /// <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
        /// <exception cref="InvalidOperationException">Thrown if the Matrix3 is singular.</exception>
        public static Matrix3 Invert(Matrix3 mat)
        {
            const int dim = 3;
            int[] colIdx = { 0, 0, 0};
            int[] rowIdx = { 0, 0, 0};
            int[] pivotIdx = { -1, -1, -1 };

            // convert the matrix to an array for easy looping
            unit[,] inverse = {
                { mat.Column0.X, mat.Column1.X, mat.Column2.X },
                { mat.Column0.Y, mat.Column1.Y, mat.Column2.Y },
                { mat.Column0.Z, mat.Column1.Z, mat.Column2.Z } };


            int icol = 0;
            int irow = 0;
            for (int i = 0; i < dim; i++)
            {
                // Find the largest pivot value
                unit maxPivot = 0;
                for (int j = 0; j < dim; j++)
                {
                    if (pivotIdx [j] != 0)
                    {
                        for (int k = 0; k < dim; ++k)
                        {
                            if (pivotIdx [k] == -1)
                            {
                                unit absVal = System.Math.Abs(inverse [j, k]);
                                if (absVal > maxPivot)
                                {
                                    maxPivot = absVal;
                                    irow = j;
                                    icol = k;
                                }
                            }
                            else if (pivotIdx [k] > 0)
                            {
                                return mat;
                            }
                        }
                    }
                }

                ++(pivotIdx [icol]);

                // Swap rows over so pivot is on diagonal
                if (irow != icol)
                {
                    for (int k = 0; k < dim; ++k)
                    {
                        unit f = inverse [irow, k];
                        inverse [irow, k] = inverse [icol, k];
                        inverse [icol, k] = f;
                    }
                }

                rowIdx [i] = irow;
                colIdx [i] = icol;

                unit pivot = inverse [icol, icol];
                // check for singular matrix
                if (pivot == 0)
                {
                    throw new InvalidOperationException("Matrix is singular and cannot be inverted.");
                    //return mat;
                }

                // Scale row so it has a unit diagonal
                unit oneOverPivot = one / pivot;
                inverse [icol, icol] = one;
                for (int k = 0; k < dim; ++k)
                    inverse [icol, k] *= oneOverPivot;

                // Do elimination of non-diagonal elements
                for (int j = 0; j < dim; ++j)
                {
                    // check this isn't on the diagonal
                    if (icol != j)
                    {
                        unit f = inverse [j, icol];
                        inverse [j, icol] = 0;
                        for (int k = 0; k < dim; ++k)
                            inverse [j, k] -= inverse [icol, k] * f;
                    }
                }
            }

            for (int j = 3; j >= 0; --j)
            {
                int ir = rowIdx [j];
                int ic = colIdx [j];
                for (int k = 0; k < dim; ++k)
                {
                    unit f = inverse [k, ir];
                    inverse [k, ir] = inverse [k, ic];
                    inverse [k, ic] = f;
                }
            }

            mat.Column0.X = inverse [0, 0];
            mat.Column0.Y = inverse [1, 0];
            mat.Column0.Z = inverse [2, 0];
            mat.Column1.X = inverse [0, 1];
            mat.Column1.Y = inverse [1, 1];
            mat.Column1.Z = inverse [2, 1];
            mat.Column2.X = inverse [0, 2];
            mat.Column2.Y = inverse [1, 2];
            mat.Column2.Z = inverse [2, 2];

            return mat;
        }

        /// <summary>
        /// Calculate the transpose of the given matrix
        /// </summary>
        /// <param name="mat">The matrix to transpose</param>
        /// <returns>The transpose of the given matrix</returns>
        public static Matrix3 Transpose(Matrix3 mat)
        {
            return new Matrix3(mat.Row0, mat.Row1, mat.Row2
                                      );
        }


        /// <summary>
        /// Calculate the transpose of the given matrix
        /// </summary>
        /// <param name="mat">The matrix to transpose</param>
        /// <param name="result">The result of the calculation</param>
        public static void Transpose(ref Matrix3 mat, out Matrix3 result)
        {
            result.Column0 = mat.Row0;
            result.Column1 = mat.Row1;
            result.Column2 = mat.Row2;
        }

        #endregion

        #region Overrides

        /// <summary></summary>
        public override string ToString()
        {
            return String.Format(
                "[ {0}   {3}   {6} ]\n" +
                "[ {1}   {4}   {7} ]\n" +
                "[ {2}   {5}   {8} ]\n",
                Column0.X.ToString("0.0"), Column0.Y.ToString("0.0"), Column0.Z.ToString("0.0"),
                Column1.X.ToString("0.0"), Column1.Y.ToString("0.0"), Column1.Z.ToString("0.0"),
                Column2.X.ToString("0.0"), Column2.Y.ToString("0.0"), Column2.Z.ToString("0.0")
            );
        }

        /// <summary></summary>
        public override int GetHashCode()
        {
            return Column0.GetHashCode() ^ Column1.GetHashCode() ^ Column2.GetHashCode()
                ;
        }

        /// <summary></summary>
        public override bool Equals(object obj)
        {
            if (!(obj is Matrix3))
                return false;

            return this.Equals((Matrix3)obj);
        }

        #endregion

        #region IEquatable<Matrix3> Members

        /// <summary>Indicates whether the current matrix is equal to another matrix.</summary>
        /// <param name="other">An matrix to compare with this matrix.</param>
        /// <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        public bool Equals(Matrix3 other)
        {
            return
                Column0 == other.Column0 &&
                Column1 == other.Column1 &&
                Column2 == other.Column2
                    ;
        }

        #endregion
    }
}
