using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Generator.Template
{
    /// <summary>
    /// Generate Vector[234][dih].cs based on VectorTemplate.cs
    /// </summary>
    class MainClass
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Template Generator");
            string basePath = ".." + Path.DirectorySeparatorChar +
                ".." + Path.DirectorySeparatorChar +
                ".." + Path.DirectorySeparatorChar +
                "OpenTK" + Path.DirectorySeparatorChar +
                "Math" + Path.DirectorySeparatorChar;
                
            string templatePath = Path.Combine(basePath, "VectorTemplate.cs");

            string[] template = File.ReadAllLines(templatePath, Encoding.UTF8);

            int[] dimensions = new int[]{2,3,4};
            string[] suffix = new string[]{"d","","h","i"}; //Double, Single, Half, Int32

            foreach (int d in dimensions)
            {
                foreach (string s in suffix)
                {
                    string filename = "Vector" + d + s + ".cs";
                    Console.WriteLine("Generating " + filename);
                    using (TextWriter w = new StreamWriter(Path.Combine(basePath, filename), false, Encoding.UTF8))
                        GenerateVector(template, d, s, w);
                }
            }
        }

        static void GenerateVector(string[] template, int dimension, string suffix, TextWriter w)
        {
            w.WriteLine("// Generated by Generator.Template using template Math/VectorTemplate.cs");
            w.WriteLine();

            //Local defined conditions
            List<string> local = new List<string>(){
                "VECTOR_COMPONENT_3",
                "VECTOR_COMPONENT_4",
                "VECTOR_DOUBLE",
                "VECTOR_SINGLE",
                "VECTOR_INT32",
                "VECTOR_HALF",
            };

            List<string> include = new List<string>();

            if (dimension >= 3)
                include.Add("VECTOR_COMPONENT_3");
            if (dimension >= 4)
                include.Add("VECTOR_COMPONENT_4");

            string templateClass = "VectorTemplate";
            string targetClass = "Vector" + dimension;
            if (suffix == "d")
            {
                include.Add("VECTOR_DOUBLE");
                targetClass += "d";
            }
            if (suffix == "")
            {
                include.Add("VECTOR_SINGLE");
            }
            if (suffix == "i")
            {
                include.Add("VECTOR_INT32");
                targetClass += "i";
            }
            if (suffix == "h")
            {
                include.Add("VECTOR_HALF");
                targetClass += "h";
            }

            foreach (var i in include)
                w.WriteLine("#define " + i);

            DirectiveParser dp = new DirectiveParser(local, include);

            bool start = true; //to remove leading comments

            foreach (string l in template)
            {
                if (start && l.Trim() != "")
                    continue;
                else
                    start = false;

                if(dp.Parse(l) == false)
                    continue;

                //Replace class name
                string line = l.Replace(templateClass, targetClass);

                w.WriteLine(line);
            }

            dp.Finish();
        }

    }
}
